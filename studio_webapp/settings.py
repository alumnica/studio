"""
Django settings for studio_webapp project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys
#import pyrebase

import dj_database_url
from django.utils.translation import gettext_lazy as _

VERSION_NUMBER = 'v0.12.0'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'd4$itpp&epvrm)%4(dd&qox0$wwv21g!fo3c$^y8ta^e@d((bt')
SECURE_SSL_REDIRECT = bool(os.environ.get('FORCE_SSL', False))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False #not os.environ.get('ON_HEROKU', False)


ALLOWED_HOSTS = ['54.153.4.110','ec2-54-153-4-110.us-west-1.compute.amazonaws.com', '.alumnica.org', '127.0.0.1']
CORS_ORIGIN_ALLOW_ALL = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'alumnica@fundacionmanuelmoreno.org'
EMAIL_HOST_PASSWORD = 'Alumnica1234'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'alumnica@fundacionmanuelmoreno.org'

# Application definition

INSTALLED_APPS = [
    'django_db_prefix',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'studio.apps.StudioConfig',
    'django_use_email_as_username.apps.DjangoUseEmailAsUsernameConfig',
    'alumnica_model.apps.AlumnicaModelConfig',
    #'django_h5p.apps.DjangoH5PConfig',
    'sweetify',
    'storages',
    'rest_framework',
    'sorl.thumbnail',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'studio_webapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'studio_webapp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {'default': {}}

if not os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES['default'] = dj_database_url.config()

# noinspection PyTypeChecker
DATABASES['default']['ATOMIC_REQUESTS'] = True
DB_PREFIX = 'alumnica_'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# noinspection PyUnresolvedReferences
MEDIA_ROOT = 'media'
MEDIA_URL = '/media/'
# noinspection PyUnresolvedReferences
STATIC_ROOT = 'static'
STATIC_URL = '/static/'

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_INSTANCE_URL = os.environ.get('AWS_INSTANCE_URL')

if all([AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_STORAGE_BUCKET_NAME]):
    # Use S3 from Amazon Web Services to store uploaded files
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_AUTO_CREATE_BUCKET = True
    AWS_S3_FILE_OVERWRITE = True
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_FILE_BUFFER_SIZE = os.environ.get('AWS_S3_FILE_BUFFER_SIZE', 1024 * 1024 * 100)  # 15 MB
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_S3_REGION_NAME = "us-west-1"
    AWS_S3_ADDRESSING_STYLE = "virtual"


AUTH_USER_MODEL = 'alumnica_model.AuthUser'

admin_names = os.environ.get('ADMIN_NAMES')
admin_emails = os.environ.get('ADMIN_EMAILS')

if admin_names and admin_emails:
    admin_names = admin_names.split(';')
    admin_emails = admin_emails.split(';')

    ADMINS = list(zip(admin_names, admin_emails))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)s] [%(module)s.%(funcName)s:%(lineno)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': sys.stdout,
        },
        'mail': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        # 'django_h5p': {
        #     'handlers': ['console', 'mail'],
        #     'level': os.getenv('STUDIO_LOG_LEVEL', 'DEBUG'),
        #     'propagate': False
        # },
        'studio': {
            'handlers': ['console', 'mail'],
            'level': os.getenv('STUDIO_LOG_LEVEL', 'DEBUG'),
            'propagate': False
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': [],
}

print (BASE_DIR)

# CONFIG_FIREBASE = {
#     'apiKey': "AIzaSyDIC-Z71vk5QG5rgnRBCl9WtySWghUT4Iw",
#     'authDomain': "alumnica-app.firebaseapp.com",
#     'databaseURL': "https://alumnica-app.firebaseio.com",
#     'projectId': "alumnica-app",
#     'storageBucket': "alumnica-app.appspot.com",
#     'messagingSenderId': "804465192747",
#     'appId': "1:804465192747:web:77d5d6257c21940b22df6e",
#     'measurementId': "G-45CRE7JS83",
#     'serviceAccount': BASE_DIR + "/alumnica-app-firebase-adminsdk-w2lxi-0d9945b073.json"
# }

# firebase = pyrebase.initialize_app(CONFIG_FIREBASE)



# auth = firebase.auth()

# # Log the user in
# user = auth.sign_in_with_email_and_password('karazu20@gmail.com', 'P4$$w0rd')
# print (user)
# print ('user success')


# db = firebase.database()

# # data to save
# data = {
#     "name": "Fisico Matematicas"
# }

# # Pass the user's idToken to the push method
# results = db.child("ambitos").push(data ) #, user['idToken'])

# print (results)
# print ('ambito guardado')

# storage = firebase.storage() 
