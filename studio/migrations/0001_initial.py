# Generated by Django 2.0.2 on 2018-03-08 19:06

import alumnica_entities.content_organization.presentation
import alumnica_entities.content_organization.structures
import alumnica_entities.evaluation.exercises
import alumnica_entities.evaluation.quiz
import alumnica_entities.geometry
import alumnica_entities.microodas.enigma_comic
import alumnica_entities.microodas.interactive_video
import alumnica_entities.microodas.minijuego
import alumnica_entities.users
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministratorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('last_name_field', models.CharField(max_length=100, verbose_name='apellido')),
                ('email_field', models.CharField(max_length=250, verbose_name='correo electrónico')),
                ('password_field', models.CharField(max_length=100, verbose_name='contraseña')),
            ],
            options={
                'verbose_name_plural': 'administradores',
                'verbose_name': 'administrador',
            },
            bases=(alumnica_entities.users.Administrator, models.Model),
        ),
        migrations.CreateModel(
            name='AnswerGivenByLearnerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_field', models.CharField(max_length=200, verbose_name='respuesta')),
                ('is_correct_field', models.BooleanField(verbose_name='¿es correcto?')),
            ],
            options={
                'verbose_name_plural': 'respuestas proporcionadas por alumno',
                'verbose_name': 'respuesta proporcionada por alumno',
            },
            bases=(alumnica_entities.evaluation.quiz.AnswerGivenByLearner, models.Model),
        ),
        migrations.CreateModel(
            name='ContentCreatorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('last_name_field', models.CharField(max_length=100, verbose_name='apellido')),
                ('email_field', models.CharField(max_length=250, verbose_name='correo electrónico')),
                ('password_field', models.CharField(max_length=100, verbose_name='contraseña')),
            ],
            options={
                'verbose_name_plural': 'creadores de contenido',
                'verbose_name': 'creador de contenidos',
            },
            bases=(alumnica_entities.users.ContentCreator, models.Model),
        ),
        migrations.CreateModel(
            name='DataAnalystModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('last_name_field', models.CharField(max_length=100, verbose_name='apellido')),
                ('email_field', models.CharField(max_length=250, verbose_name='correo electrónico')),
                ('password_field', models.CharField(max_length=100, verbose_name='contraseña')),
            ],
            options={
                'verbose_name_plural': 'analistas de datos',
                'verbose_name': 'analista de datos',
            },
            bases=(alumnica_entities.users.DataAnalyst, models.Model),
        ),
        migrations.CreateModel(
            name='EngimaComicStaticSceneModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_field', models.CharField(choices=[('STATIC SCENE', 'STATIC SCENE'), ('360 SCENE', '360 SCENE')], max_length=20, verbose_name='tipo de escena')),
                ('sequence_field', models.PositiveSmallIntegerField(default=0, verbose_name='número de secuencia')),
                ('background_scene_field', models.ImageField(upload_to='', verbose_name='imagen de fondo')),
            ],
            options={
                'verbose_name_plural': 'escenas estáticas de un cómic Enigma',
                'verbose_name': 'escena estática de un cómic Enigma',
            },
            bases=(alumnica_entities.microodas.enigma_comic.EnigmaComicStaticScene, alumnica_entities.microodas.enigma_comic.EnigmaComicScene, models.Model),
        ),
        migrations.CreateModel(
            name='EnigmaComicClickableAreaModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_field', models.TextField(verbose_name='texto')),
                ('is_correct_field', models.BooleanField(default=False, verbose_name='es correcta')),
            ],
            options={
                'verbose_name_plural': 'áreas cliqueables de un cómic Enigma',
                'verbose_name': 'área cliqueable de un cómic Enigma',
            },
            bases=(alumnica_entities.microodas.enigma_comic.EngimaComicClickableArea, models.Model),
        ),
        migrations.CreateModel(
            name='EnigmaComicModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
                ('type_field', models.CharField(choices=[('INTERACTIVE VIDEO', 'INTERACTIVE VIDEO'), ('WIKIRETO', 'WIKIRETO'), ('ENIGMA COMIC', 'ENIGMA COMIC'), ('MINIJUEGO', 'MINIJUEGO'), ('ORGANIZADOR', 'ORGANIZADOR')], max_length=50, verbose_name='tipo')),
                ('default_position_field', models.PositiveSmallIntegerField(default=0, verbose_name='posición por defecto')),
            ],
            options={
                'verbose_name_plural': 'cómics Enigma',
                'verbose_name': 'cómic Enigma',
            },
            bases=(alumnica_entities.microodas.enigma_comic.EnigmaComic, alumnica_entities.content_organization.structures.MicroODA, models.Model),
        ),
        migrations.CreateModel(
            name='EnigmaComicS360SceneModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_field', models.CharField(choices=[('STATIC SCENE', 'STATIC SCENE'), ('360 SCENE', '360 SCENE')], max_length=20, verbose_name='tipo de escena')),
                ('sequence_field', models.PositiveSmallIntegerField(default=0, verbose_name='número de secuencia')),
                ('image_360_field', models.ImageField(upload_to='', verbose_name='imagen 360')),
                ('enigma_comic_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.EnigmaComicModel', verbose_name='cómic Enigma')),
            ],
            options={
                'verbose_name_plural': 'escenas 360 de un cómic Enigma',
                'verbose_name': 'escena 360 de un cómic Enigma',
            },
            bases=(alumnica_entities.microodas.enigma_comic.EnigmaComicS360Scene, alumnica_entities.microodas.enigma_comic.EnigmaComicScene, models.Model),
        ),
        migrations.CreateModel(
            name='ExerciseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
                ('type_field', models.CharField(choices=[('Categorizar', 'Categorizar'), ('Image Selection', 'Image Selection'), ('Image Sorting', 'Image Sorting')], max_length=50, verbose_name='tipo')),
            ],
            options={
                'verbose_name_plural': 'ejercicios',
                'verbose_name': 'ejercicio',
            },
            bases=(alumnica_entities.evaluation.exercises.Exercise, models.Model),
        ),
        migrations.CreateModel(
            name='ExerciseSolutionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_field', models.CharField(choices=[('Categorizar Solution', 'Categorizar Solution'), ('Image Selection Solution', 'Image Selection Solution'), ('Image Sorting Solution', 'Image Sorting Solution')], max_length=30, verbose_name='tipo de solución')),
                ('score_field', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='puntuación')),
                ('exercise_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.ExerciseModel', verbose_name='ejercicio')),
            ],
            options={
                'verbose_name_plural': 'soluciones del ejercicio',
                'verbose_name': 'solución del ejercicio',
            },
            bases=(alumnica_entities.evaluation.exercises.ExerciseSolution, models.Model),
        ),
        migrations.CreateModel(
            name='ForkNodeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('type_field', models.CharField(choices=[('VIDEO', 'VIDEO'), ('FORK', 'FORK'), ('EXERCISE', 'EXERCISE')], max_length=50, verbose_name='tipo de nodo')),
                ('image_field', models.ImageField(upload_to='', verbose_name='imagen de fondo')),
            ],
            options={
                'verbose_name_plural': 'nodos de bifurcación para Video Interactivo',
                'verbose_name': 'nodo de bifurcación para Video Interactivo',
            },
            bases=(alumnica_entities.microodas.interactive_video.ForkNode, alumnica_entities.microodas.interactive_video.InteractiveVideoNode, models.Model),
        ),
        migrations.CreateModel(
            name='InteractiveVideoModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
                ('type_field', models.CharField(choices=[('INTERACTIVE VIDEO', 'INTERACTIVE VIDEO'), ('WIKIRETO', 'WIKIRETO'), ('ENIGMA COMIC', 'ENIGMA COMIC'), ('MINIJUEGO', 'MINIJUEGO'), ('ORGANIZADOR', 'ORGANIZADOR')], max_length=50, verbose_name='tipo')),
                ('default_position_field', models.PositiveSmallIntegerField(default=0, verbose_name='posición por defecto')),
            ],
            options={
                'verbose_name_plural': 'microODAs',
                'verbose_name': 'microODA',
                'abstract': False,
            },
            bases=(alumnica_entities.microodas.interactive_video.InteractiveVideo, alumnica_entities.content_organization.structures.MicroODA, models.Model),
        ),
        migrations.CreateModel(
            name='LearnerEvaluationModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_field', models.DecimalField(decimal_places=2, max_digits=11, verbose_name='puntuación')),
                ('rating_given_by_leaner_field', models.DecimalField(decimal_places=2, max_digits=100, verbose_name='calificación')),
            ],
            options={
                'verbose_name_plural': 'evaluaciones del alumno',
                'verbose_name': 'evaluación del alumno',
            },
            bases=(alumnica_entities.evaluation.quiz.LearnerEvaluation, models.Model),
        ),
        migrations.CreateModel(
            name='LearnerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('last_name_field', models.CharField(max_length=100, verbose_name='apellido')),
                ('email_field', models.CharField(max_length=250, verbose_name='correo electrónico')),
                ('password_field', models.CharField(max_length=100, verbose_name='contraseña')),
            ],
            options={
                'verbose_name_plural': 'alumnos',
                'verbose_name': 'alumno',
            },
            bases=(alumnica_entities.users.Learner, models.Model),
        ),
        migrations.CreateModel(
            name='MiniJuegoModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
                ('type_field', models.CharField(choices=[('INTERACTIVE VIDEO', 'INTERACTIVE VIDEO'), ('WIKIRETO', 'WIKIRETO'), ('ENIGMA COMIC', 'ENIGMA COMIC'), ('MINIJUEGO', 'MINIJUEGO'), ('ORGANIZADOR', 'ORGANIZADOR')], max_length=50, verbose_name='tipo')),
                ('default_position_field', models.PositiveSmallIntegerField(default=0, verbose_name='posición por defecto')),
            ],
            options={
                'verbose_name_plural': 'microODAs',
                'verbose_name': 'microODA',
                'abstract': False,
            },
            bases=(alumnica_entities.microodas.minijuego.MiniJuego, alumnica_entities.content_organization.structures.MicroODA, models.Model),
        ),
        migrations.CreateModel(
            name='MiniJuegoSceneItemModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_positioning_message_field', models.TextField(blank=True, verbose_name='mensaje de éxito')),
                ('incorrect_positioning_message_field', models.TextField(blank=True, verbose_name='mensaje de error')),
                ('image_field', models.ImageField(upload_to='', verbose_name='imagen del sprite')),
                ('correct_row_index_field', models.SmallIntegerField(default=-1, verbose_name='índice de fila correcta')),
                ('correct_column_index_field', models.SmallIntegerField(default=-1, verbose_name='índice de columna correcta')),
            ],
            options={
                'verbose_name_plural': 'items de escena de MiniJuego',
                'verbose_name': 'item de escena de 0MiniJuego',
            },
            bases=(alumnica_entities.microodas.minijuego.MiniJuegoSceneItem, models.Model),
        ),
        migrations.CreateModel(
            name='MiniJuegoSceneModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_field', models.PositiveSmallIntegerField(default=0, verbose_name='número de secuencia')),
                ('minijuego_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.MiniJuegoModel', verbose_name='miniJuego')),
            ],
            options={
                'verbose_name_plural': 'escenas de MiniJuegos',
                'verbose_name': 'escena de MiniJuego',
            },
            bases=(alumnica_entities.microodas.minijuego.MiniJuegoScene, models.Model),
        ),
        migrations.CreateModel(
            name='NodeLinkModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background_image_field', models.ImageField(upload_to='', verbose_name='imagen de fondo')),
                ('fork_node_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='available_links_set', to='studio.ForkNodeModel', verbose_name='nodo de bifurcación')),
                ('target_node_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_links_set', to='studio.ForkNodeModel', verbose_name='siguiente nodo')),
            ],
            options={
                'verbose_name_plural': 'enlaces de nodos',
                'verbose_name': 'enlace de nodos',
            },
            bases=(alumnica_entities.microodas.interactive_video.NodeLink, models.Model),
        ),
        migrations.CreateModel(
            name='ODAModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
                ('icon_field', models.ImageField(upload_to='', verbose_name='ícono')),
            ],
            options={
                'verbose_name_plural': 'ODAs',
                'verbose_name': 'ODA',
            },
            bases=(alumnica_entities.content_organization.structures.ODA, models.Model),
        ),
        migrations.CreateModel(
            name='Point2DModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_field', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='coordenada x')),
                ('y_field', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='coordenada y')),
            ],
            options={
                'verbose_name_plural': 'par de coordenadas',
                'verbose_name': 'coordenadas',
            },
            bases=(alumnica_entities.geometry.Point2D, models.Model),
        ),
        migrations.CreateModel(
            name='PossibleAnswerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_field', models.CharField(max_length=200, verbose_name='texto')),
                ('is_correct_field', models.BooleanField(verbose_name='¿es correcto?')),
            ],
            options={
                'verbose_name_plural': 'respuestas posibles',
                'verbose_name': 'respuesta posible',
            },
            bases=(alumnica_entities.evaluation.quiz.PossibleAnswer, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_field', models.CharField(max_length=200, verbose_name='texto')),
                ('type_field', models.CharField(choices=[('Multiple Choice', 'Multiple Choice'), ('Open Ended', 'Open Ended')], max_length=20, verbose_name='tipo')),
                ('evaluation_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.LearnerEvaluationModel', verbose_name='evaluación')),
            ],
            options={
                'verbose_name_plural': 'preguntas',
                'verbose_name': 'pregunta',
            },
            bases=(alumnica_entities.evaluation.quiz.Question, models.Model),
        ),
        migrations.CreateModel(
            name='SubworldModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
            ],
            options={
                'verbose_name_plural': 'submundos',
                'verbose_name': 'submundo',
            },
            bases=(alumnica_entities.content_organization.structures.Subworld, models.Model),
        ),
        migrations.CreateModel(
            name='ThemeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('primary_color_field', models.CharField(max_length=6, verbose_name='color primario')),
                ('secondary_color_field', models.CharField(max_length=6, verbose_name='color secundario')),
                ('background_image_field', models.ImageField(upload_to='', verbose_name='imagen de fondo')),
            ],
            options={
                'verbose_name_plural': 'temas',
                'verbose_name': 'tema',
            },
            bases=(alumnica_entities.content_organization.presentation.Theme, models.Model),
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('last_name_field', models.CharField(max_length=100, verbose_name='apellido')),
                ('email_field', models.CharField(max_length=250, verbose_name='correo electrónico')),
                ('password_field', models.CharField(max_length=100, verbose_name='contraseña')),
                ('type_field', models.CharField(max_length=20, verbose_name='tipo')),
                ('auth_user_field', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'usuarios',
                'verbose_name': 'usuario',
            },
            bases=(alumnica_entities.users.UserEntity, models.Model),
        ),
        migrations.CreateModel(
            name='VideoNodeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=100, verbose_name='nombre')),
                ('type_field', models.CharField(choices=[('VIDEO', 'VIDEO'), ('FORK', 'FORK'), ('EXERCISE', 'EXERCISE')], max_length=50, verbose_name='tipo de nodo')),
                ('source_field', models.URLField(verbose_name='URL')),
                ('close_captions_field', models.TextField(blank=True, verbose_name='subtítulos')),
                ('duration_in_seconds_field', models.PositiveSmallIntegerField(default=0, verbose_name='duración en segundos')),
                ('interactive_video_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.InteractiveVideoModel', verbose_name='video interactivo')),
            ],
            options={
                'verbose_name_plural': 'nodos de video para Video Interactivo',
                'verbose_name': 'nodo de video para Video Interactivo',
            },
            bases=(alumnica_entities.microodas.interactive_video.VideoNode, alumnica_entities.microodas.interactive_video.InteractiveVideoNode, models.Model),
        ),
        migrations.CreateModel(
            name='WorldModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_field', models.CharField(max_length=150, verbose_name='nombre')),
                ('description_field', models.TextField(blank=True, verbose_name='descripción')),
            ],
            options={
                'verbose_name_plural': 'mundos',
                'verbose_name': 'mundo',
            },
            bases=(alumnica_entities.content_organization.structures.World, models.Model),
        ),
        migrations.AddField(
            model_name='subworldmodel',
            name='theme_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studio.ThemeModel', verbose_name='tema'),
        ),
        migrations.AddField(
            model_name='subworldmodel',
            name='world_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.WorldModel', verbose_name='mundo'),
        ),
        migrations.AddField(
            model_name='possibleanswermodel',
            name='question_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.QuestionModel', verbose_name='pregunta'),
        ),
        migrations.AddField(
            model_name='odamodel',
            name='subworld_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.SubworldModel', verbose_name='submundo'),
        ),
        migrations.AddField(
            model_name='minijuegosceneitemmodel',
            name='scene_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.MiniJuegoSceneModel', verbose_name='escena del MiniJuego'),
        ),
        migrations.AddField(
            model_name='minijuegomodel',
            name='oda_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.ODAModel', verbose_name='ODA'),
        ),
        migrations.AddField(
            model_name='learnerevaluationmodel',
            name='learner_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.LearnerModel', verbose_name='alumno'),
        ),
        migrations.AddField(
            model_name='interactivevideomodel',
            name='oda_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.ODAModel', verbose_name='ODA'),
        ),
        migrations.AddField(
            model_name='forknodemodel',
            name='interactive_video_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.InteractiveVideoModel', verbose_name='video interactivo'),
        ),
        migrations.AddField(
            model_name='forknodemodel',
            name='selected_link_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='studio.NodeLinkModel', verbose_name='nodo elegido'),
        ),
        migrations.AddField(
            model_name='enigmacomicmodel',
            name='exercise_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='studio.ExerciseModel', verbose_name='ejercicio'),
        ),
        migrations.AddField(
            model_name='enigmacomicmodel',
            name='oda_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.ODAModel', verbose_name='ODA'),
        ),
        migrations.AddField(
            model_name='enigmacomicclickableareamodel',
            name='point0_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='points_as_x', to='studio.Point2DModel', verbose_name='punto 0'),
        ),
        migrations.AddField(
            model_name='enigmacomicclickableareamodel',
            name='point1_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='points_as_y', to='studio.Point2DModel', verbose_name='punto 1'),
        ),
        migrations.AddField(
            model_name='engimacomicstaticscenemodel',
            name='enigma_comic_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.EnigmaComicModel', verbose_name='cómic Enigma'),
        ),
        migrations.AddField(
            model_name='answergivenbylearnermodel',
            name='evaluation_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.LearnerEvaluationModel', verbose_name='evaluación'),
        ),
        migrations.AddField(
            model_name='answergivenbylearnermodel',
            name='question_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.QuestionModel', verbose_name='pregunta'),
        ),
    ]
